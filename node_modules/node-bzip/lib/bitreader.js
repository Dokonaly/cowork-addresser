var BITMASK = [0x00, 0x01, 0x03, 0x07, 0x0F, 0x1F, 0x3F, 0x7F, 0xFF];

// offset in bytes
var BitReader = function(buf, offset) {
	this.buf = buf;
	this.offset = offset || 0;
	this.bitOffset = 0;
};

// reads bits from the buffer
BitReader.prototype.read = function(bits) {
	var result = 0;
	while (bits > 0) {
		var remaining = 8 - this.bitOffset;
		// if we're in a byte
		if (bits >= remaining) {
			result <<= remaining;
			result |= BITMASK[remaining] & this.buf[this.offset++];
			this.bitOffset = 0;
			bits -= remaining;
		} else {
			result <<= bits;
			var shift = remaining - bits;
			result |= (this.buf[this.offset] & (BITMASK[bits] << shift)) >> shift;
			this.bitOffset += bits;
			bits = 0;
		}
	}
	return result;
};

// reads 6 bytes worth of data using the read method
BitReader.prototype.pi = function() {
	var buf;
	if (this.bitOffset === 0)
		buf = this.buf.slice(this.offset, this.offset += 6);
	else {
		buf = new Buffer(6);
		for (var i = 0; i < buf.length; i++)
			buf[i] = this.read(8);
		this.offset += 6;
	}
	return buf.toString('hex');
};

module.exports = BitReader;
